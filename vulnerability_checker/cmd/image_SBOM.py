# runs syft to create a sbom for container images for each verison. 

# I have to make some edits to dynamically do all the versions. 
# Also I placed the container image sboms in a folder, but i will have to change the directory dynmically to put it in the folder it gets the CSV file
import subprocess
import csv
import os

# Function to run Syft and save results to a CSV file
def run_syft_and_save(image_name, csv_file_name):
    try:
        # Run Syft on the specified image and store the result in a CSV file
        result = subprocess.run(["syft", image_name], stdout=subprocess.PIPE, check=True, text=True)
        sbom_csv_data = result.stdout

        with open(csv_file_name, 'w', newline='') as csv_file:
            # Write the CSV data to the file
            csv_file.write(sbom_csv_data)

        print(f"Syft analysis completed for image: {image_name}")
        print(f"Syft analysis data saved to {csv_file_name}\n")
    except subprocess.CalledProcessError:
        print(f"Syft analysis failed for image: {image_name}\n")

# Define the base directory where your version folders are located
base_directory = "/Users/ussie/Desktop/K8S CLI Tool/Evolution-of-Kubernetes-/SBOM/Parsed SBOM"

# Iterate through all version folders in the base directory
for version_folder in os.listdir(base_directory):
    version_path = os.path.join(base_directory, version_folder)
    
    # Check if it's a directory
    if os.path.isdir(version_path):
        # Construct the path for the packages_output.csv
        csv_file_name = os.path.join(version_path, f"{version_folder}_packages_output.csv")
       
        if os.path.exists(csv_file_name):
            # Create a folder for version-specific image SBOMs inside the version folder
            version_image_sbom_folder = os.path.join(version_path, f"{version_folder}_Image_SBOM")
            if not os.path.exists(version_image_sbom_folder):
                os.makedirs(version_image_sbom_folder)

            with open(csv_file_name, 'r') as csv_file:
                reader = csv.DictReader(csv_file)
                for row in reader:
                    package_name = row['PackageName']
                    # looking for k8s container images
                    if package_name.startswith("k8s.gcr.io"):
                        image_name = package_name
                        # Extract the specific package name from the container image
                        package_name_parts = package_name.split("/")
                        if len(package_name_parts) > 1:
                            package_name = package_name_parts[-1].replace(":", "_").replace("/", "_")
                            csv_file_name = f"{package_name}.csv"
                            # storing the CSV file in the version-specific Image_SBOM folder
                            csv_file_path = os.path.join(version_image_sbom_folder, csv_file_name)
                            run_syft_and_save(image_name, csv_file_path)
        else:
            print(f"packages_output.csv does not exist for version: {version_folder}")
    else:
        print(f"Skipping non-directory entry: {version_folder}")