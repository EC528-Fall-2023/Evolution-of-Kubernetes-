# runs syft to create a sbom for container images for each verison. 

# I have to make some edits to dynamically do all the versions. 
# Also I placed the container image sboms in a folder, but i will have to change the directory dynmically to put it in the folder it gets the CSV file from! 

import subprocess
import csv
import os


# Function to run Syft and save results to a CSV file
def run_syft_and_save(image_name, csv_file_name):
    try:
        # Run Syft on the specified image and store the result in a CSV file
        result = subprocess.run(["syft", image_name], stdout=subprocess.PIPE, check=True, text=True)
        sbom_csv_data = result.stdout

        with open(csv_file_name, 'w', newline='') as csv_file:
            # Write the CSV data to the file
            csv_file.write(sbom_csv_data)

        print(f"Syft analysis completed for image: {image_name}")
        print(f"Syft analysis data saved to {csv_file_name}\n")
    except subprocess.CalledProcessError:
        print(f"Syft analysis failed for image: {image_name}\n")

# Read container image names from a CSV file (Assuming the CSV file has columns as mentioned)
csv_file_name = "/Users/ussie/Desktop/K8S CLI Tool/Evolution-of-Kubernetes-/SBOM/Parsed SBOM/v1.18.20/v1.18.20_packages_output.csv"
output_folder = "/Users/ussie/Desktop/K8S CLI Tool/IMAGE_SBOM"
if not os.path.exists(output_folder):
    os.makedirs(output_folder)

with open(csv_file_name, 'r') as csv_file:
    reader = csv.DictReader(csv_file)
    for row in reader:
        package_name = row['PackageName']
        # looking for k8s container images
        if package_name.startswith("k8s.gcr.io"):
            image_name = package_name
            # Extract the specific package name from the container image
            package_name_parts = package_name.split("/")
            if len(package_name_parts) > 1:
                package_name = package_name_parts[-1].replace(":", "_").replace("/", "_")
                csv_file_name = f"{package_name}.csv"
                # storing the csv file in the IMAGE_SBOM folder
                csv_file_path = os.path.join(output_folder, csv_file_name) 
                run_syft_and_save(image_name, csv_file_path)
