import os
import re
import time
import requests
from dotenv import load_dotenv, find_dotenv

'''
 The cves_search function queries the NIST National Vulnerability Database for information about a given CVE ID. 
 It uses an API key loaded from environment variables, makes a request, and extracts relevant details:
    * CVE ID,
    * published date
    * English descriptions
    * base scores. 
 Returns a dictionary with this information; otherwise, an empty dictionary is returned.

 *** NIST API does 50 requests per 30 seconds
'''
def cves_search_with_rate_limit(query: str) -> dict:
    load_dotenv()
    apikey = os.getenv("api_key")
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={query}"
    headers = {"apikey": apikey}
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raise an HTTPError for bad responses
        results = response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error during API request: {e}")
        # Wait for 60 seconds in case of an error
        time.sleep(60)
        return {}

    if 'vulnerabilities' in results and results['vulnerabilities']:
        vulnerability = results['vulnerabilities'][0]
        cve_id = vulnerability['cve']['id']
        published_date = vulnerability['cve']['published']

        english_descriptions = [
            desc['value'] for desc in vulnerability['cve']['descriptions']
            if desc['lang'] == 'en'
        ]

        all_base_scores = []
        for metric_version, metrics_list in vulnerability['cve']['metrics'].items():
            if metric_version.startswith('cvssMetric'):
                base_scores = [metric['cvssData']['baseScore'] for metric in metrics_list]
                all_base_scores.extend(base_scores)

        return {
            'CVE_ID': cve_id,
            'Published_Date': published_date,
            'Descriptions': english_descriptions,
            'Base_Score': all_base_scores
        }

    return {}
'''
 The extract_cve_vulnerabilities function reads the content of a file and extracts the "CVES"
'''
def extract_cve_vulnerabilities(file_path):
    with open(file_path, 'r') as file:
        content = file.read()

    cve_matches = re.findall(r'\bCVE-\d{4}-\d+\s?\b', content)
    return cve_matches
'''
 The main function iterates through the version folders, searches for specific files with CVE information, and 
 extracts CVE identifiers using extract_cve_vulnerabilities. For each CVE, it performs a search 
 using cves_search_with_rate_limit while respecting API rate limits. Results, including errors, are 
 written to an output file. The RES folder contains the result for each CVE per each grype_output. 
'''
def main():
    searched_cves = set()
    api_request_count = 0
    api_request_limit = 50
    api_request_interval = 30  
    error_count = 0  # counter for API errors

    root_directory = '/K8S CLI Tool/Evolution-of-Kubernetes-/SBOM/Parsed SBOM'
    output_folder = '/K8S CLI Tool/Res'

    for version_folder in os.listdir(root_directory):
        version_path = os.path.join(root_directory, version_folder)
        if os.path.isdir(version_path):
            grype_output_folder = os.path.join(version_path, 'grype_syft_output')

            if os.path.exists(grype_output_folder) and os.path.isdir(grype_output_folder):
                for file_name in os.listdir(grype_output_folder):
                    if file_name.endswith('_grype_output.txt'):

                        file_path = os.path.join(grype_output_folder, file_name)
                        cve_list = extract_cve_vulnerabilities(file_path)
                        output_file_path = os.path.join(output_folder, f"{version_folder}_output.txt")
                        with open(output_file_path, 'a') as output_file:
                            output_file.write(f"File: {file_name}\n")
                            for cve in cve_list:
                                if cve not in searched_cves:

                                    if api_request_count >= api_request_limit:
                                        print(f"Waiting for {api_request_interval} seconds to comply with API rate limit...")
                                        time.sleep(api_request_interval)
                                        api_request_count = 0
                                    cpe_info = cves_search_with_rate_limit(cve)
                                    searched_cves.add(cve)
                                    
                                    if not cpe_info:
                                        error_count += 1
                                        output_file.write(f"Error for CVE: {cve}\n")
                                    else:
                                        output_file.write(f"CVE: {cve}\n")
                                        output_file.write(f"{cpe_info}\n")
                                    api_request_count += 1
                            output_file.write("\n")

    print(f"Number of API errors: {error_count}")

if __name__ == "__main__":
    main()
