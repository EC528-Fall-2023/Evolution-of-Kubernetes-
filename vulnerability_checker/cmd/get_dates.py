import requests
import os
import logging
from dotenv import load_dotenv, find_dotenv
import re


'''
This function calls the NIST CPE API. It takes in a
keyword to query and returns a list of CPEs for that
keyword.
'''


def cpes_search(query: str) -> list:
    
    apikey = "68f82ab8-3300-43d4-b5f5-a9bb255df490"
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={query}"
    
    headers = {"apikey": apikey}

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raise an HTTPError for bad responses
        results = response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error during API request: {e}")
        return {}

    if 'vulnerabilities' in results and results['vulnerabilities']:
        vulnerability = results['vulnerabilities'][0]

        cve_id = vulnerability['cve']['id']
        published_date = vulnerability['cve']['published']
        
        # Filter only English descriptions
        english_descriptions = [
            desc['value'] for desc in vulnerability['cve']['descriptions']
            if desc['lang'] == 'en'
        ]

        all_base_scores = []
        """
        if 'metrics' in vulnerability:
            for metric_version, metrics_list in vulnerability['metrics'].items():
                if metric_version.startswith('cvssMetric'):
                    base_scores = [metric['cvss']['baseScore'] for metric in metrics_list]
                    all_base_scores.extend(base_scores)
        """
        for metric_version, metrics_list in results['vulnerabilities'][0]['cve']['metrics'].items():
            if metric_version.startswith('cvssMetric'):
                base_scores = [metric['cvssData']['baseScore'] for metric in metrics_list]
                all_base_scores.extend(base_scores)
        return {
            'CVE_ID': cve_id,
            'Published_Date': published_date,
            'Descriptions': english_descriptions,
            'Base_Score': all_base_scores
        }

        


    return {}

def extract_cve_vulnerabilities(file_path):
    # Read the content of the file
    with open(file_path, 'r') as file:
        content = file.read()

    # Use regex to find all strings that match the CVE pattern
    cve_matches = re.findall(r'\bCVE-\d{4}-\d+\s?\b', content)

    return cve_matches

def create_info_folder_and_file(grype_file_path, output_directory):
    # Extract file name without extension and "_grype_output"
    base_name = os.path.splitext(os.path.basename(grype_file_path))[0]
    folder_name = base_name.replace('_grype_output', '-info')

    # Create the folder
    folder_path = os.path.join(output_directory, folder_name)
    os.makedirs(folder_path, exist_ok=True)

    # Create and write to the "Info" file
    info_file_path = os.path.join(folder_path, 'Info.txt')
    with open(info_file_path, 'w') as info_file:
        info_file.write(f"Folder Name: {folder_name}\n\n")

        # Run extract_cve_vulnerabilities on the grype file
        cves = extract_cve_vulnerabilities(grype_file_path)

        # Run cpes_search for each CVE and store the results in the "Info" file
        for cve in cves:
            cpe_result = cpes_search(cve)
            info_file.write(f"CVE: {cve}\n")
            info_file.write(f"CPES Search Result: {cpe_result}\n\n")

    print(f"Folder '{folder_name}' created with CVE information in '{info_file_path}'")

base_directory = "/Users/ussie/Desktop/K8S CLI Tool/Evolution-of-Kubernetes-/SBOM/Parsed SBOM"

# Specify the output directory
output_directory = "/Users/ussie/Desktop/K8S CLI Tool/Res"

# Loop through version folders
for version_folder in os.listdir(base_directory):
    version_folder_path = os.path.join(base_directory, version_folder)
    
    # Check if it is a directory
    if os.path.isdir(version_folder_path):
        
        # Create a single text file for each version
        version_info_file_path = os.path.join(output_directory, f"{version_folder}_Info.txt")
        
        with open(version_info_file_path, 'w') as version_info_file:
            version_info_file.write(f"Version: {version_folder}\n\n")
            
            # Loop through grype_syft_output folders
            grype_syft_output_folder = os.path.join(version_folder_path, 'grype_syft_output')
            if os.path.exists(grype_syft_output_folder):
                for filename in os.listdir(grype_syft_output_folder):
                    if filename.endswith("_grype_output.txt"):
                        grype_file_path = os.path.join(grype_syft_output_folder, filename)
                        
                        # Run extract_cve_vulnerabilities on the grype file
                        cves = extract_cve_vulnerabilities(grype_file_path)
                        
                        # Run cpes_search for each CVE and store the results in the version text file
                        for cve in cves:
                            cpe_result = cpes_search(cve)
                            version_info_file.write(f"CVE: {cve}\n")
                            version_info_file.write(f"CPES Search Result: {cpe_result}\n\n")
                            
        print(f"Information for version '{version_folder}' written to '{version_info_file_path}'")
        exit()